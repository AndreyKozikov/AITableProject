# Enhanced AITableProject Application
# Implements custom UI/UX design with professional styling and enhanced user experience

import streamlit as st
import streamlit.components.v1 as components
from pathlib import Path
import re
import hashlib
from datetime import datetime

# Import existing utilities
from src.utils.config import INBOX_DIR
from src.utils.process_files import process_files

# Import template loader
from src.app.templates.template_loader import render_template, load_template

# Configure page settings
st.set_page_config(
    page_title="AITableProject - Professional Document Processing",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="collapsed"
)


def load_custom_css():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π CSS –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º CSS –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
        css_file_path = Path(__file__).parent / "static" / "styles.css"
        with open(css_file_path, "r", encoding="utf-8") as f:
            css_content = f.read()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –∏—Å–ø–æ–ª—å–∑—É—è st.html –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        st.html(f"<style>{css_content}</style>")
        
    except FileNotFoundError:
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–∞–∑–æ–≤–æ–≥–æ —Å—Ç–∏–ª—è, –µ—Å–ª–∏ CSS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        st.markdown("""
        <style>
        .stApp {
            background-color: #f8fafc !important;
            color: #1e293b !important;
        }
        .main > div {
            background: #f8fafc !important;
            padding: 1rem !important;
        }
        </style>
        """, unsafe_allow_html=True)


def create_compact_header():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º"""
    header_html = load_template("header")
    st.markdown(header_html, unsafe_allow_html=True)


def create_compact_upload_component() -> list:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è file_uploader Streamlit.

    Returns:
        –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    """
    upload_card_html = load_template("upload_card")
    st.markdown(upload_card_html, unsafe_allow_html=True)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫—Ä—ã—Ç—É—é –≤–∏–¥–∏–º–æ—Å—Ç—å –º–µ—Ç–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π UI
    uploaded_files = st.file_uploader(
        label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        type=["txt", "csv", "xlsx", "xls", "pdf", "doc", "docx", "jpg", "jpeg", "png"],
        accept_multiple_files=True,
        key="main_uploader",
        label_visibility="collapsed",
    )

    return uploaded_files or []


def create_progress_tracker(current_step, total_steps, status_message):
    """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    progress_percentage = (current_step / total_steps) * 100
    
    progress_html = render_template(
        "progress_tracker",
        current_step=current_step,
        total_steps=total_steps,
        progress_percentage=progress_percentage,
        status_message=status_message
    )
    
    components.html(progress_html, height=150)


def _get_file_icon(file_path: Path) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é emoji –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å emoji –∏–∫–æ–Ω–∫–æ–π
    """
    ext = file_path.suffix.lower()
    icon_map = {
        '.pdf': "üìÑ",
        '.xlsx': "üìä",
        '.xls': "üìä",
        '.doc': "üìò",
        '.docx': "üìò",
        '.jpg': "üñºÔ∏è",
        '.jpeg': "üñºÔ∏è",
        '.png': "üñºÔ∏è",
        '.txt': "üìù",
        '.csv': "üìù",
    }
    return icon_map.get(ext, "üìé")


def create_compact_file_list(files):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ iframe"""
    if not files:
        return
    
    # –°—Ç—Ä–æ–∏–º HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤
    file_items_html = []
    
    for file_path in files:
        file_name = Path(file_path).name
        file_size = Path(file_path).stat().st_size if Path(file_path).exists() else 0
        file_size_kb = file_size / 1024
        icon = _get_file_icon(Path(file_path))
        
        file_item_html = render_template(
            "file_item",
            icon=icon,
            file_name=file_name,
            file_size=f"{file_size_kb:.1f}"
        )
        file_items_html.append(file_item_html)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    file_list_html = render_template(
        "file_list",
        file_count=len(files),
        file_items="".join(file_items_html)
    )
    
    components.html(file_list_html, height=400, scrolling=True)


def create_results_display(result_path, processing_time):
    """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if not result_path or not Path(result_path).exists():
        return
    
    file_size = Path(result_path).stat().st_size / 1024  # KB
    
    results_html = render_template(
        "results_display",
        file_size=f"{file_size:.1f}",
        processing_time=processing_time
    )
    
    st.markdown(results_html, unsafe_allow_html=True)


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def _transliterate_ru_to_latin(text: str) -> str:
    """
    –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã.
    
    Args:
        text: –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    
    Returns:
        –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    """
    mapping = {
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'E', 
        '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M', 
        '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U', 
        '–§': 'F', '–•': 'Kh', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch', 
        '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya',
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e', 
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', 
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', 
        '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch', 
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
    }
    return ''.join(mapping.get(ch, ch) for ch in text)


def _sanitize_stem(stem: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç –æ—Å–Ω–æ–≤—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ.
    
    Args:
        stem: –û—Å–Ω–æ–≤–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    
    Returns:
        –û—á–∏—â–µ–Ω–Ω–∞—è –æ—Å–Ω–æ–≤–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    """
    translit = _transliterate_ru_to_latin(stem)
    translit = translit.strip()
    translit = re.sub(r"[^A-Za-z0-9._-]+", "_", translit)
    translit = re.sub(r"_+", "_", translit)
    translit = translit.strip("._-")
    translit = translit.lower()
    return translit or "file"


def _make_unique_name(original_name: str, start_index: int) -> tuple[str, int]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏.
    
    Args:
        original_name: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        start_index: –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏
    
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ_–∏–º—è_—Ñ–∞–π–ª–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π_–∏–Ω–¥–µ–∫—Å)
    """
    p = Path(original_name)
    base = _sanitize_stem(p.stem)
    ext = p.suffix.lower()
    idx = max(1, start_index)
    while True:
        candidate = f"{base}_{idx:03d}{ext}"
        if not (INBOX_DIR / candidate).exists():
            return candidate, idx
        idx += 1


def _file_signature(uploaded_file) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    
    Args:
        uploaded_file: –û–±—ä–µ–∫—Ç UploadedFile Streamlit
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
    """
    buf = uploaded_file.getbuffer()
    md5 = hashlib.md5(buf).hexdigest()
    return f"{uploaded_file.name}:{uploaded_file.size}:{md5}"


def _initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ Streamlit."""
    if "saved_files" not in st.session_state:
        st.session_state.saved_files = []
    if "processed" not in st.session_state:
        st.session_state.processed = False
    if "upload_map" not in st.session_state:
        st.session_state.upload_map = {}
    if "processing_start_time" not in st.session_state:
        st.session_state.processing_start_time = None


def _handle_file_uploads(uploaded_files):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é inbox.
    
    Args:
        uploaded_files: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ UploadedFile Streamlit
    """
    if not uploaded_files:
        return
    
    next_idx = 1
    for file in uploaded_files:
        sig = _file_signature(file)
        if sig in st.session_state.upload_map:
            file_path = Path(st.session_state.upload_map[sig])
        else:
            safe_name, used_idx = _make_unique_name(file.name, next_idx)
            file_path = INBOX_DIR / safe_name
            with open(file_path, "wb") as f:
                f.write(file.getbuffer())
            st.session_state.upload_map[sig] = str(file_path)
            next_idx = used_idx + 1
        if file_path not in st.session_state.saved_files:
            st.session_state.saved_files.append(file_path)


def _render_processing_settings():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    settings_card_html = load_template("settings_card")
    st.markdown(settings_card_html, unsafe_allow_html=True)

    if st.session_state.saved_files and not st.session_state.processed:
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        st.markdown("**ü§ñ –ú–æ–¥–µ–ª—å –ò–ò**")
        model_choice = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å",
            ["–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å Qwen 3", "–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å Qwen 3 + CoT", "–û–±–ª–∞—á–Ω–∞—è –º–æ–¥–µ–ª—å ChatGPT"],
            help="CoT (Chain-of-Thought) - –º–æ–¥–µ–ª—å —Å —Ü–µ–ø–æ—á–∫–∞–º–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏",
            label_visibility="collapsed",
        )

        remote_model = model_choice == "–û–±–ª–∞—á–Ω–∞—è –º–æ–¥–µ–ª—å ChatGPT"
        use_cot = model_choice == "–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å Qwen 3 + CoT"

        st.markdown("**üìä –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏**")
        # –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        mode = st.radio(
            "–†–µ–∂–∏–º",
            ["–£–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"],
            help="–£–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö",
            label_visibility="collapsed",
        )

        st.markdown("---")

        # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if st.button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", type="primary", use_container_width=True):
            st.session_state.processing_start_time = datetime.now()

            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤..."):
                result = process_files(
                    st.session_state.saved_files,
                    extended=(mode == "–£–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"),
                    remote_model=remote_model,
                    use_cot=use_cot,
                )

            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            end_time = datetime.now()
            processing_duration = end_time - st.session_state.processing_start_time

            st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {str(processing_duration).split('.')[0]}")

            # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            if result and Path(result).exists():
                with open(result, "rb") as f:
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç Excel",
                        data=f,
                        file_name=Path(result).name,
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        type="primary",
                        use_container_width=True,
                    )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            st.session_state.saved_files = []
            st.session_state.processed = True
            st.session_state.upload_map = {}

    elif not st.session_state.saved_files:
        st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∏–ª–∏
    load_custom_css()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    create_compact_header()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    _initialize_session_state()
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–æ–π
    col1, col2 = st.columns([1.2, 1], gap="medium")
    
    with col1:
        # –ï–¥–∏–Ω–∞—è –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –∑–æ–Ω–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        uploaded_files = create_compact_upload_component()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        _handle_file_uploads(uploaded_files)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if st.session_state.saved_files:
            create_compact_file_list(st.session_state.saved_files)

    with col2:
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        _render_processing_settings()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    if st.session_state.processed and uploaded_files:
        st.session_state.processed = False


if __name__ == '__main__':
    main()