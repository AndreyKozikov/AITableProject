# file: app.py
import streamlit as st
from pathlib import Path
import re
import hashlib

from contourpy.util.data import simple

from src.utils.config import INBOX_DIR
from utils.process_files import process_files
from datetime import datetime

st.title("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if "saved_files" not in st.session_state:
    st.session_state.saved_files = []
if "processed" not in st.session_state:
    st.session_state.processed = False
if "upload_map" not in st.session_state:
    # Maps file signature -> saved Path
    st.session_state.upload_map = {}

st.subheader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã")
uploaded_files = st.file_uploader(
    "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä—É—á–Ω—É—é",
    type=["txt", "csv", "xlsx", "xls", "pdf", "jpg", "jpeg", "png"],
    accept_multiple_files=True
)

def _transliterate_ru_to_latin(text: str) -> str:
    mapping = {
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'E', '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y',
        '–ö': 'K', '–õ': 'L', '–ú': 'M', '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U', '–§': 'F',
        '–•': 'Kh', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch', '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya',
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e', '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y',
        '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f',
        '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
    }
    return ''.join(mapping.get(ch, ch) for ch in text)


def _sanitize_stem(stem: str) -> str:
    translit = _transliterate_ru_to_latin(stem)
    translit = translit.strip()
    translit = re.sub(r"[^A-Za-z0-9._-]+", "_", translit)
    translit = re.sub(r"_+", "_", translit)
    translit = translit.strip("._-")
    translit = translit.lower()
    return translit or "file"


def _make_unique_name(original_name: str, start_index: int) -> tuple[str, int]:
    p = Path(original_name)
    base = _sanitize_stem(p.stem)
    ext = p.suffix.lower()
    idx = max(1, start_index)
    while True:
        candidate = f"{base}_{idx:03d}{ext}"
        if not (INBOX_DIR / candidate).exists():
            return candidate, idx
        idx += 1


def _file_signature(uploaded_file) -> str:
    # Stable signature across reruns for the same content
    buf = uploaded_file.getbuffer()
    md5 = hashlib.md5(buf).hexdigest()
    return f"{uploaded_file.name}:{uploaded_file.size}:{md5}"

# —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if uploaded_files:
    # Ensure deterministic handling across reruns: only save new files
    next_idx = 1
    for file in uploaded_files:
        sig = _file_signature(file)
        if sig in st.session_state.upload_map:
            file_path = Path(st.session_state.upload_map[sig])
        else:
            safe_name, used_idx = _make_unique_name(file.name, next_idx)
            file_path = INBOX_DIR / safe_name
            with open(file_path, "wb") as f:
                f.write(file.getbuffer())
            st.session_state.upload_map[sig] = str(file_path)
            next_idx = used_idx + 1
        if file_path not in st.session_state.saved_files:
            st.session_state.saved_files.append(file_path)

    st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(st.session_state.saved_files)}")
    for f in st.session_state.saved_files:
        st.write(f"‚úÖ {f}")

# –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã –∏ –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
if st.session_state.saved_files and not st.session_state.processed:
    # –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    model_choice = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å",
        ["–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å", "–ú–æ–¥–µ–ª—å ChatGPT 5"]
    )
    remote_model = True
    if model_choice == "–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å":
        remote_model = False

    mode = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",
        ["—É–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"]
    )
    if st.button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"):
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤..."):
            start_time = datetime.now()
            st.write(f"‚è≥ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
            result = process_files(st.session_state.saved_files,
                                   extended=(mode == "—É–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"),
                                   remote_model=remote_model)
        st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        end_time = datetime.now()
        st.write(f"üèÅ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {end_time.strftime('%Y-%m-%d %H:%M:%S')}")
        st.write(f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {end_time - start_time}")

        file_path = result
        if file_path.exists():
            with open(file_path, "rb") as f:
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                    data=f,
                    file_name=file_path.name,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
        else:
            st.error("–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        st.session_state.saved_files = []
        st.session_state.processed = True
        st.session_state.upload_map = {}

# –µ—Å–ª–∏ –≤—Å—ë –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ
if st.session_state.processed:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    # —Å–±—Ä–æ—Å–∏–º processed, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏—Ç –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    if uploaded_files:
        st.session_state.processed = False