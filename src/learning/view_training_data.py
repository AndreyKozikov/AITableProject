import streamlit as st
import json
from pathlib import Path

# Set page config
st.set_page_config(page_title="Training Data Viewer", layout="wide")

# Path to the training data file
DATA_FILE = Path(__file__).parent / "qwen3_cot_structured_train.jsonl"


@st.cache_data
def load_training_data():
    """Load training data from JSONL file."""
    data = []
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            for line in f:
                if line.strip():
                    data.append(json.loads(line))
    except FileNotFoundError:
        st.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {DATA_FILE}")
        return []
    except json.JSONDecodeError as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return []
    
    return data


def format_json_value(value):
    """Format a JSON value for display."""
    if isinstance(value, dict):
        return json.dumps(value, ensure_ascii=False, indent=2)
    elif isinstance(value, list):
        return json.dumps(value, ensure_ascii=False, indent=2)
    else:
        return str(value)


def main():
    # Load data
    training_data = load_training_data()
    
    if not training_data:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    total_records = len(training_data)
    
    # Initialize session state if needed
    if 'record_num' not in st.session_state:
        st.session_state['record_num'] = 1
    
    # Sidebar with navigation controls
    with st.sidebar:
        st.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
        st.write(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")
        
        # Navigation buttons - must be processed BEFORE number_input
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("‚óÄ", use_container_width=True):
                if st.session_state['record_num'] > 1:
                    st.session_state['record_num'] -= 1
                    st.rerun()
        
        with col2:
            if st.button("‚ñ∂", use_container_width=True):
                if st.session_state['record_num'] < total_records:
                    st.session_state['record_num'] += 1
                    st.rerun()
        
        # Record number selector - use session state value as default
        record_num = st.number_input(
            "–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏",
            min_value=1,
            max_value=total_records,
            value=st.session_state['record_num'],
            step=1,
            help="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
            key="record_num_input"
        )
        
        # Update session state when number input changes
        if st.session_state['record_num_input'] != st.session_state['record_num']:
            st.session_state['record_num'] = st.session_state['record_num_input']
            st.rerun()
    
    # Ensure record_num is valid
    record_num = st.session_state['record_num']
    if record_num < 1:
        record_num = 1
        st.session_state['record_num'] = 1
    elif record_num > total_records:
        record_num = total_records
        st.session_state['record_num'] = total_records
    
    # Get current record
    current_record = training_data[record_num - 1]
    
    # Main content area
    st.title("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # Record info
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å", f"{record_num} / {total_records}")
    with col2:
        mode = current_record.get('mode', 'N/A')
        st.metric("–†–µ–∂–∏–º", mode)
    with col3:
        progress = int((record_num / total_records) * 100)
        st.metric("–ü—Ä–æ–≥—Ä–µ—Å—Å", f"{progress}%")
    
    st.divider()
    
    # Record details in tabs
    tab1, tab2, tab3, tab4 = st.tabs(["üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üë§ –°–∏—Å—Ç–µ–º–∞", "üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"])
    
    with tab1:
        st.subheader("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        # Mode field
        mode_col1, mode_col2 = st.columns([1, 3])
        with mode_col1:
            st.write("**–†–µ–∂–∏–º:**")
        with mode_col2:
            st.code(current_record.get('mode', ''))
    
    with tab2:
        st.subheader("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
        system_text = current_record.get('system', '')
        st.text_area(
            "–°–∏—Å—Ç–µ–º–∞",
            system_text,
            height=400,
            label_visibility="collapsed"
        )
    
    with tab3:
        st.subheader("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å")
        user_text = current_record.get('user', '')
        st.text_area(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            user_text,
            height=400,
            label_visibility="collapsed"
        )
        
        # Show assistant data table on user tab as well
        assistant_data = current_record.get('assistant', {})
        if 'rows' in assistant_data and assistant_data['rows']:
            st.divider()
            st.subheader("–¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö")
            st.caption("üìã –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
            
            # Get all column names from all rows
            all_columns = set()
            for row in assistant_data['rows']:
                all_columns.update(row.keys())
            
            columns_list = sorted(list(all_columns))
            
            if columns_list:
                # Create DataFrame for display
                import pandas as pd
                df = pd.DataFrame(assistant_data['rows'])
                st.dataframe(df, use_container_width=True)
    
    with tab4:
        st.subheader("–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
        assistant_data = current_record.get('assistant', {})
        
        # Display as formatted JSON
        st.json(assistant_data)
        
        # Also show as editable table if rows exist
        if 'rows' in assistant_data and assistant_data['rows']:
            st.divider()
            st.subheader("–¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö")
            
            # Get all column names from all rows
            all_columns = set()
            for row in assistant_data['rows']:
                all_columns.update(row.keys())
            
            columns_list = sorted(list(all_columns))
            
            if columns_list:
                # Create DataFrame for display
                import pandas as pd
                df = pd.DataFrame(assistant_data['rows'])
                st.dataframe(df, use_container_width=True)
    
    # Raw JSON viewer
    with st.expander("üîç –°—ã—Ä–æ–π JSON"):
        st.json(current_record)


if __name__ == "__main__":
    main()
