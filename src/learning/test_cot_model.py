"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å Chain-of-Thought reasoning.

–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
"""

import json
from pathlib import Path
from typing import Dict, List, Any
import pandas as pd

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from mapper.ask_qwen3_cot import Qwen3CoTModel


def load_test_data(test_file: Path) -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞."""
    test_data = []
    
    if test_file.suffix == '.json':
        with open(test_file, 'r', encoding='utf-8') as f:
            test_data = json.load(f)
    elif test_file.suffix == '.xlsx':
        df = pd.read_excel(test_file)
        for _, row in df.iterrows():
            test_data.append({
                "input": str(row.get("input", "")),
                "expected": {
                    "simplified": {
                        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": str(row.get("simplified_name", "")),
                        "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è": str(row.get("simplified_unit", "—à—Ç.")),
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": str(row.get("simplified_quantity", "")),
                        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ": str(row.get("simplified_spec", ""))
                    },
                    "extended": {
                        "–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ": str(row.get("extended_denotation", "")),
                        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": str(row.get("extended_name", "")),
                        "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": str(row.get("extended_manufacturer", "")),
                        "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è": str(row.get("extended_unit", "—à—Ç.")),
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": str(row.get("extended_quantity", "")),
                        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ": str(row.get("extended_spec", ""))
                    }
                }
            })
    
    return test_data


def calculate_accuracy(predicted: Dict, expected: Dict) -> float:
    """–í—ã—á–∏—Å–ª–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."""
    if not predicted or not expected:
        return 0.0
    
    total_fields = len(expected)
    correct_fields = 0
    
    for key, expected_value in expected.items():
        predicted_value = predicted.get(key, "")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        expected_norm = str(expected_value).strip().lower()
        predicted_norm = str(predicted_value).strip().lower()
        
        if expected_norm == predicted_norm:
            correct_fields += 1
        elif expected_norm in predicted_norm or predicted_norm in expected_norm:
            # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            correct_fields += 0.5
    
    return correct_fields / total_fields if total_fields > 0 else 0.0


def test_model_on_data(model: Qwen3CoTModel, test_data: List[Dict[str, Any]]) -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö."""
    results = {
        "total_tests": len(test_data),
        "simplified_results": [],
        "extended_results": [],
        "overall_accuracy": 0.0
    }
    
    print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ {len(test_data)} –ø—Ä–∏–º–µ—Ä–∞—Ö...")
    
    for i, test_case in enumerate(test_data):
        print(f"\n--- –¢–µ—Å—Ç {i+1}/{len(test_data)} ---")
        print(f"–í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç: {test_case['input']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º simplified —Ä–µ–∂–∏–º
        if "simplified" in test_case.get("expected", {}):
            print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ simplified —Ä–µ–∂–∏–º–∞...")
            simplified_result = model.ask_qwen3_cot(test_case["input"], mode="simplified")
            
            if simplified_result["success"]:
                predicted = simplified_result["result"].get("rows", [{}])[0] if simplified_result["result"].get("rows") else {}
                expected = test_case["expected"]["simplified"]
                accuracy = calculate_accuracy(predicted, expected)
                
                results["simplified_results"].append({
                    "test_id": i+1,
                    "input": test_case["input"],
                    "predicted": predicted,
                    "expected": expected,
                    "accuracy": accuracy,
                    "reasoning": simplified_result.get("reasoning", "")
                })
                
                print(f"‚úì –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2f}")
                print(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ: {predicted}")
                print(f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {simplified_result['error']}")
                results["simplified_results"].append({
                    "test_id": i+1,
                    "input": test_case["input"],
                    "error": simplified_result["error"],
                    "accuracy": 0.0
                })
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º extended —Ä–µ–∂–∏–º
        if "extended" in test_case.get("expected", {}):
            print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ extended —Ä–µ–∂–∏–º–∞...")
            extended_result = model.ask_qwen3_cot(test_case["input"], mode="extended")
            
            if extended_result["success"]:
                predicted = extended_result["result"].get("rows", [{}])[0] if extended_result["result"].get("rows") else {}
                expected = test_case["expected"]["extended"]
                accuracy = calculate_accuracy(predicted, expected)
                
                results["extended_results"].append({
                    "test_id": i+1,
                    "input": test_case["input"],
                    "predicted": predicted,
                    "expected": expected,
                    "accuracy": accuracy,
                    "reasoning": extended_result.get("reasoning", "")
                })
                
                print(f"‚úì –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2f}")
                print(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ: {predicted}")
                print(f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {extended_result['error']}")
                results["extended_results"].append({
                    "test_id": i+1,
                    "input": test_case["input"],
                    "error": extended_result["error"],
                    "accuracy": 0.0
                })
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
    all_accuracies = []
    for result in results["simplified_results"]:
        all_accuracies.append(result["accuracy"])
    for result in results["extended_results"]:
        all_accuracies.append(result["accuracy"])
    
    if all_accuracies:
        results["overall_accuracy"] = sum(all_accuracies) / len(all_accuracies)
    
    return results


def save_test_results(results: Dict[str, Any], output_file: Path):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")


def print_test_summary(results: Dict[str, Any]):
    """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("\n" + "=" * 70)
    print("–°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {results['total_tests']}")
    print(f"–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {results['overall_accuracy']:.2f}")
    
    # Simplified —Ä–µ–∂–∏–º
    if results["simplified_results"]:
        simplified_acc = [r["accuracy"] for r in results["simplified_results"]]
        print(f"\nSimplified —Ä–µ–∂–∏–º:")
        print(f"  –¢–µ—Å—Ç–æ–≤: {len(simplified_acc)}")
        print(f"  –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {sum(simplified_acc)/len(simplified_acc):.2f}")
        print(f"  –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {max(simplified_acc):.2f}")
        print(f"  –•—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {min(simplified_acc):.2f}")
    
    # Extended —Ä–µ–∂–∏–º
    if results["extended_results"]:
        extended_acc = [r["accuracy"] for r in results["extended_results"]]
        print(f"\nExtended —Ä–µ–∂–∏–º:")
        print(f"  –¢–µ—Å—Ç–æ–≤: {len(extended_acc)}")
        print(f"  –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {sum(extended_acc)/len(extended_acc):.2f}")
        print(f"  –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {max(extended_acc):.2f}")
        print(f"  –•—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {min(extended_acc):.2f}")
    
    # –¢–æ–ø-3 –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    all_results = results["simplified_results"] + results["extended_results"]
    top_results = sorted(all_results, key=lambda x: x.get("accuracy", 0), reverse=True)[:3]
    
    print(f"\nüèÜ –¢–æ–ø-3 –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
    for i, result in enumerate(top_results, 1):
        print(f"  {i}. –¢–æ—á–Ω–æ—Å—Ç—å: {result.get('accuracy', 0):.2f}")
        print(f"     –í—Ö–æ–¥: {result['input']}")
        if 'predicted' in result:
            print(f"     –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ: {result['predicted']}")
    
    print("=" * 70)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("=" * 70)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò –° CHAIN-OF-THOUGHT REASONING")
    print("=" * 70)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    script_dir = Path(__file__).parent
    test_data_file = script_dir / "test_data.json"  # –°–æ–∑–¥–∞–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    output_file = script_dir / "test_results.json"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not test_data_file.exists():
        print(f"‚ùå –§–∞–π–ª —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_data_file}")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª test_data.json —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑: {test_data_file}")
    test_data = load_test_data(test_data_file)
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(test_data)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    print("\n–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...")
    try:
        model = Qwen3CoTModel()
        print("‚úì –ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\n–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    results = test_model_on_data(model, test_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_test_results(results, output_file)
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    print_test_summary(results)


if __name__ == "__main__":
    main()
